#encoding=utf8
import re

# program = ["external_declaration", "program external_declaration", ]
# external_declaration = ["function_definition", "declaration", ]
# function_definition = ["type_specifier declarator compound_statement", ]
# type_specifier = ["VOID", "CHAR", "INT", "FLOAT", ]
# declarator = ["pointer direct_declarator", "direct_declarator", ]
# Pointer = ["'*'", "'*' pointer", ]
# direct_declarator = ["IDENTIFIER", "direct_declarator '[' ']'", "direct_declarator '[' constant_expression ']'",
#                      "IDENTIFIER '(' parameter_list ')'", "IDENTIFIER '(' ')'",
#                      "direct_declarator  ','  identifier_list", ]
# identifier_list = ["IDENTIFIER", "identifier_list ',' IDENTIFIER", ]
# constant_expression = ["conditional_expression", ]
# parameter_list = ["parameter_declaration", "parameter_list ',' parameter_declaration", ]
# parameter_declaration = ["declaration_specifiers  IDENTIFIER", ]
# compound_statement = ["'{' '}'", "'{' statement_list '}'", "'{' declaration_list statement_list '}'", ]
# declaration_list = ["declaration", "declaration_list declaration", ]
# Declaration = ["init_declarator", "init_declarator_list ',' init_declarator", ]
# init_declarator = ["declarator", "declarator '=' initializer", ]
# Initializer = ["assignment_expression", "'{' initializer_list '}'", "'{' initializer_list ',' '}'", ]
# initializer_list = ["initializer", "initializer_list ',' initializer", ]
# statement_list = ["statement", "statement_list statement", ]
# Statement = ["", "compound_statement", "expression_statement", "selection_statement", "iteration_statement",
#              "jump_statement", ]
# expression_statement = ["';'", "expression ';'", ]
# selection_statement = ["IF '(' expression ')' statement", "IF '(' expression ')' statement ELSE statement", ]
# iteration_statement = ["WHILE '(' expression ')' statement",
#                        "FOR '(' expression_statement expression_statement ')' statement",
#                        "FOR '(' expression_statement expression_statement expression ')' statement", ]
# jump_statement = [ "CONTINUE ';'", "BREAK ';'", "RETURN ';'", "RETURN expression ';'","", ]
# expression = ["assignment_expression", "expression ',' assignment_expression", ]
# assignment_expression = ["conditional_expression", "unary_expression assignment_operator assignment_expression", ]
# conditional_expression = ["logical_or_expression", "logical_or_expression '?' expression ':' conditional_expression", ]
# logical_or_expression = ["logical_and_expression", "logical_or_expression OR_OP logical_and_expression", ]
# logical_and_expression = ["inclusive_or_expression", "logical_and_expression AND_OP inclusive_or_expression", ]
# inclusive_or_expression = ["exclusive_or_expression", "inclusive_or_expression '", "' exclusive_or_expression", ]
# exclusive_or_expression = ["and_expression", "exclusive_or_expression '^' and_expression", ]
# and_expression = ["equality_expression", "and_expression '&' equality_expression", ]
# equality_expression = ["relational_expression", "equality_expression EQ_OP relational_expression",
#                        "equality_expression NE_OP relational_expression", ]
# relational_expression = ["shift_expression", "relational_expression '<' shift_expression",
#                          "relational_expression '>' shift_expression", "relational_expression LE_OP shift_expression",
#                          "relational_expression GE_OP shift_expression", ]
# shift_expression = ["additive_expression", "shift_expression LEFT_OP additive_expression",
#                     "shift_expression RIGHT_OP additive_expression", ]
# additive_expression = ["multiplicative_expression", "additive_expression '+' multiplicative_expression",
#                        "additive_expression '-' multiplicative_expression", ]
# multiplicative_expression = ["cast_expression", "multiplicative_expression '*' cast_expression",
#                              "multiplicative_expression '/' cast_expression",
#                              "multiplicative_expression '%' cast_expression", ]
# cast_expression = ["unary_expression", "'(' type_name ')' cast_expression", ]
# unary_expression = ["postfix_expression", "INC_OP unary_expression", "DEC_OP unary_expression",
#                     "unary_operator cast_expression", "SIZEOF unary_expression", "SIZEOF '(' type_name ')'", ]
# postfix_expression = ["primary_expression", "postfix_expression '[' expression ']'", "postfix_expression '(' ')'",
#                       "postfix_expression '(' argument_expression_list ')'", "postfix_expression '.' IDENTIFIER",
#                       "postfix_expression PTR_OP IDENTIFIER", "postfix_expression INC_OP",
#                       "postfix_expression DEC_OP", ]
# primary_expression = ["IDENTIFIER", "CONSTANT", "STRING_LITERAL", "'(' expression ')'", ]
# argument_expression_list = ["assignment_expression", "argument_expression_list ',' assignment_expression", ]
# unary_operator = ["'&'", "'*'", "'+'", "'-'", "'~'", "'!'", ]
# assignment_operator = ["'='", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "LEFT_ASSIGN",
#                        "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", ]
# storage_class_specifier = ["TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", ]
# struct_or_union_specifier = ["struct_or_union IDENTIFIER '{' struct_declaration_list '}'",
#                              "struct_or_union '{' struct_declaration_list '}'", "struct_or_union IDENTIFIER", ]
# struct_or_union = ["STRUCT", "UNION", ]
# struct_declaration_list = ["struct_declaration", "struct_declaration_list struct_declaration", ]
# struct_declaration = ["specifier_qualifier_list struct_declarator_list ';'", ]
# specifier_qualifier_list = ["type_specifier specifier_qualifier_list", "type_specifier",
#                             "type_qualifier specifier_qualifier_list", "type_qualifier", ]
# struct_declarator_list = ["struct_declarator", "struct_declarator_list ',' struct_declarator", ]
# struct_declarator = ["declarator", "':' constant_expression", "declarator ':' constant_expression", ]
# enum_specifier = ["ENUM '{' enumerator_list '}'", "ENUM IDENTIFIER '{' enumerator_list '}'", "ENUM IDENTIFIER", ]
# enumerator_list = ["enumerator", "enumerator_list ',' enumerator", ]
# Enumerator = ["IDENTIFIER", "IDENTIFIER '=' constant_expression", ]
# type_qualifier = ["CONST", "VOLATILE", ]
# type_qualifier_list = ["type_qualifier", "type_qualifier_list type_qualifier", ]
# parameter_type_list = ["parameter_list", "parameter_list ',' ELLIPSIS", ]
# parameter_list = ["parameter_declaration", "parameter_list ',' parameter_declaration", ]
# type_name = ["specifier_qualifier_list", "specifier_qualifier_list abstract_declarator", ]
# abstract_declarator = ["pointer", "direct_abstract_declarator", "pointer direct_abstract_declarator", ]
# direct_abstract_declarator = ["'(' abstract_declarator ')'", "'[' ']'", "'[' constant_expression ']'",
#                               "direct_abstract_declarator '[' ']'",
#                               "direct_abstract_declarator '[' constant_expression ']'", "'(' ')'",
#                               "'(' parameter_type_list ')'", "direct_abstract_declarator '(' ')'",
#                               "direct_abstract_declarator '(' parameter_type_list ')'", ]
# labeled_statement = ["IDENTIFIER ':' statement", "CASE constant_expression ':' statement", "DEFAULT ':' statement", ]


# c_dict={"program" : ["external_declaration","program external_declaration",],
# "external_declaration" : ["function_definition","declaration",],
# "function_definition" : ["type_specifier declarator compound_statement",],
# "type_specifier" : ["VOID","CHAR","INT","FLOAT",],
# "declarator" : ["pointer direct_declarator","direct_declarator",],
# "Pointer" : ["'*'","'*' pointer",],
# # "direct_declarator" : ["IDENTIFIER '(' parameter_list ')'","IDENTIFIER '(' ')'","IDENTIFIER",],
# "direct_declarator" : ["IDENTIFIER '(' ')' direct_declarator1","IDENTIFIER '(' parameter_list ')' direct_declarator1","IDENTIFIER direct_declarator1"],
# "direct_declarator1":["'[' ']' direct_declarator1","'[' constant_expression ']' direct_declarator1","','  identifier_list direct_declarator1",""],
# "identifier_list" : ["IDENTIFIER","identifier_list ',' IDENTIFIER",],
# "constant_expression" : ["conditional_expression",],
# "parameter_list" : ["parameter_declaration","parameter_list ',' parameter_declaration",],
# "parameter_declaration" : ["declaration_specifiers  IDENTIFIER",],
# "compound_statement" : ["'{' '}'","'{' statement_list '}'","'{' declaration_list statement_list '}'",],
# "declaration_list" : ["declaration","declaration_list declaration",],
# "declaration" : ["init_declarator","init_declarator_list ',' init_declarator",],
# "init_declarator" : ["declarator","declarator '=' initializer",],
# "initializer" : ["assignment_expression","'{' initializer_list '}'","'{' initializer_list ',' '}'",],
# "initializer_list" : ["initializer","initializer_list ',' initializer",],
# "statement_list" : ["statement","statement_list statement",],
# "statement" : ["expression_statement","selection_statement","iteration_statement","jump_statement","compound_statement",""],
# "expression_statement" : ["';'","expression ';'",],
# "selection_statement" : ["IF '(' expression ')' statement","IF '(' expression ')' statement ELSE statement",],
# "iteration_statement" : ["WHILE '(' expression ')' statement","FOR '(' expression_statement expression_statement ')' statement","FOR '(' expression_statement expression_statement expression ')' statement",],
# "jump_statement" : ["CONTINUE ';'","BREAK ';'","RETURN ';'","RETURN expression ';'","",],
# "expression" : ["assignment_expression","expression ',' assignment_expression",],
# "assignment_expression" : ["unary_expression assignment_operator assignment_expression","conditional_expression",],
# "conditional_expression" : ["logical_or_expression","logical_or_expression '?' expression ':' conditional_expression",],
# "logical_or_expression" : ["logical_and_expression","logical_or_expression OR_OP logical_and_expression",],
# "logical_and_expression" : ["inclusive_or_expression","logical_and_expression AND_OP inclusive_or_expression",],
# "inclusive_or_expression" : ["exclusive_or_expression","inclusive_or_expression '","' exclusive_or_expression",],
# "exclusive_or_expression" : ["and_expression","exclusive_or_expression '^' and_expression",],
# "and_expression" : ["equality_expression","and_expression '&' equality_expression",],
# "equality_expression" : ["relational_expression","equality_expression EQ_OP relational_expression","equality_expression NE_OP relational_expression",],
# "relational_expression" : ["shift_expression","relational_expression '<' shift_expression","relational_expression '>' shift_expression","relational_expression LE_OP shift_expression","relational_expression GE_OP shift_expression",],
# "shift_expression" : ["additive_expression","shift_expression LEFT_OP additive_expression","shift_expression RIGHT_OP additive_expression",],
# "additive_expression" : ["multiplicative_expression","additive_expression '+' multiplicative_expression","additive_expression '-' multiplicative_expression",],
# "multiplicative_expression" : ["cast_expression","multiplicative_expression '*' cast_expression","multiplicative_expression '/' cast_expression","multiplicative_expression '%' cast_expression",],
# "cast_expression" : ["unary_expression","'(' type_name ')' cast_expression",],
# "unary_expression" : ["postfix_expression","INC_OP unary_expression","DEC_OP unary_expression","unary_operator cast_expression","SIZEOF unary_expression","SIZEOF '(' type_name ')'",],
# "postfix_expression" : ["primary_expression","postfix_expression '[' expression ']'","postfix_expression '(' ')'","postfix_expression '(' argument_expression_list ')'","postfix_expression '.' IDENTIFIER","postfix_expression PTR_OP IDENTIFIER","postfix_expression INC_OP","postfix_expression DEC_OP",],
# "primary_expression" : ["IDENTIFIER","CONSTANT","STRING_LITERAL","'(' expression ')'",],
# "argument_expression_list" : ["assignment_expression","argument_expression_list ',' assignment_expression",],
# "unary_operator" : ["'&'","'*'","'+'","'-'","'~'","'!'",],
# "assignment_operator" : ["'='","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN",],
# "storage_class_specifier" : ["TYPEDEF","EXTERN","STATIC","AUTO","REGISTER",],
# "struct_or_union_specifier" : ["struct_or_union IDENTIFIER '{' struct_declaration_list '}'","struct_or_union '{' struct_declaration_list '}'","struct_or_union IDENTIFIER",],
# "struct_or_union" : ["STRUCT","UNION",],
# "struct_declaration_list" : ["struct_declaration","struct_declaration_list struct_declaration",],
# "struct_declaration" : ["specifier_qualifier_list struct_declarator_list ';'",],
# "specifier_qualifier_list" : ["type_specifier specifier_qualifier_list","type_specifier","type_qualifier specifier_qualifier_list","type_qualifier",],
# "struct_declarator_list" : ["struct_declarator","struct_declarator_list ',' struct_declarator",],
# "struct_declarator" : ["declarator","':' constant_expression","declarator ':' constant_expression",],
# "enum_specifier" : ["ENUM '{' enumerator_list '}'","ENUM IDENTIFIER '{' enumerator_list '}'","ENUM IDENTIFIER",],
# "enumerator_list" : ["enumerator","enumerator_list ',' enumerator",],
# "Enumerator" : ["IDENTIFIER","IDENTIFIER '=' constant_expression",],
# "type_qualifier" : ["CONST","VOLATILE",],
# "type_qualifier_list" : ["type_qualifier","type_qualifier_list type_qualifier",],
# "parameter_type_list" : ["parameter_list","parameter_list ',' ELLIPSIS",],
# "parameter_list" : ["parameter_declaration","parameter_list ',' parameter_declaration",],
# "type_name" : ["specifier_qualifier_list","specifier_qualifier_list abstract_declarator",],
# "abstract_declarator" : ["pointer","direct_abstract_declarator","pointer direct_abstract_declarator",],
# "direct_abstract_declarator" : ["'(' abstract_declarator ')'","'[' ']'","'[' constant_expression ']'","direct_abstract_declarator '[' ']'","direct_abstract_declarator '[' constant_expression ']'","'(' ')'","'(' parameter_type_list ')'","direct_abstract_declarator '(' ')'","direct_abstract_declarator '(' parameter_type_list ')'",],
# "labeled_statement" : ["IDENTIFIER ':' statement","CASE constant_expression ':' statement","DEFAULT ':' statement",]
#
# }
# c_dict={'Pointer': ["'*'", "'*' pointer"], 'shift_expression': ['additive_expression 1000'], 'function_definition': ['type_specifier declarator compound_statement'], '1001': ["'+' multiplicative_expression 1001", "'-' multiplicative_expression 1001"], 'type_qualifier': ['CONST', 'VOLATILE'], '1008': ["'[' ']' 1008", "'[' constant_expression ']' 1008", "'(' ')' 1008", "'(' parameter_type_list ')' 1008"], 'selection_statement': ["IF '(' expression ')' statement", "IF '(' expression ')' statement ELSE statement"], 'additive_expression': ['multiplicative_expression 1001'], 'relational_expression': ['additive_expression 1000'], '1009': ['statement 1009'], '1010': ["',' assignment_expression 1010"], 'compound_statement': ["'{' '}'", "'{' statement_list '}'", "'{' declaration_list statement_list '}'"], 'struct_declaration': ["specifier_qualifier_list struct_declarator_list ';'"], 'storage_class_specifier': ['TYPEDEF', 'EXTERN', 'STATIC', 'AUTO', 'REGISTER'], 'exclusive_or_expression': ['and_expression 1002'], 'type_name': ['specifier_qualifier_list', 'specifier_qualifier_list abstract_declarator'], '1006': ["',' IDENTIFIER 1006"], 'struct_or_union_specifier': ["struct_or_union IDENTIFIER '{' struct_declaration_list '}'", "struct_or_union '{' struct_declaration_list '}'", 'struct_or_union IDENTIFIER'], '1004': ["',' assignment_expression 1004"], 'expression_statement': ["';'", "expression ';'"], 'cast_expression': ['unary_expression', "'(' type_name ')' cast_expression"], 'declaration_list': ['declaration 1003'], 'external_declaration': ['type_specifier declarator compound_statement'], 'specifier_qualifier_list': ['CONST  specifier_qualifier_list', 'VOLATILE  specifier_qualifier_list'], 'multiplicative_expression': ['unary_expression', "'(' type_name ')' cast_expression"], 'argument_expression_list': ['assignment_expression 1004'], 'logical_or_expression': ['logical_and_expression 1005'], 'initializer': ['assignment_expression', "'{' initializer_list '}'", "'{' initializer_list ',' '}'"], '1011': ["',' enumerator 1011"], '1000': ['LEFT_OP additive_expression 1000', 'RIGHT_OP additive_expression 1000'], 'primary_expression': ['IDENTIFIER', 'CONSTANT', 'STRING_LITERAL', "'(' expression ')'"], 'declarator': ['pointer direct_declarator', 'direct_declarator'], 'parameter_declaration': ['declaration_specifiers  IDENTIFIER'], 'struct_declaration_list': ["CONST  specifier_qualifier_list  struct_declarator_list ';'", "VOLATILE  specifier_qualifier_list  struct_declarator_list ';'"], 'postfix_expression': ['IDENTIFIER', 'CONSTANT', 'STRING_LITERAL', "'(' expression ')'"], '1003': ['declaration 1003'], 'identifier_list': ['IDENTIFIER 1006'], 'type_qualifier_list': ['CONST', 'VOLATILE'], 'struct_declarator': ['pointer direct_declarator', 'direct_declarator'], 'program': ['type_specifier declarator compound_statement'], 'initializer_list': ['assignment_expression', "'{' initializer_list '}'", "'{' initializer_list ',' '}'"], 'logical_and_expression': ['inclusive_or_expression 1007'], 'direct_abstract_declarator': ["'(' abstract_declarator ')' 1008", "'[' ']' 1008", "'[' constant_expression ']' 1008", "'(' ')' 1008", "'(' parameter_type_list ')' 1008"], 'type_specifier': ['VOID', 'CHAR', 'INT', 'FLOAT'], 'Enumerator': ['IDENTIFIER', "IDENTIFIER '=' constant_expression"], 'statement_list': ['statement 1009'], 'equality_expression': ['additive_expression 1000'], 'conditional_expression': ['inclusive_or_expression 1007  1005'], 'struct_declarator_list': ['pointer direct_declarator', 'direct_declarator'], 'iteration_statement': ["WHILE '(' expression ')' statement", "FOR '(' expression_statement expression_statement ')' statement", "FOR '(' expression_statement expression_statement expression ')' statement"], 'expression': ['assignment_expression 1010'], 'init_declarator': ['pointer direct_declarator', 'direct_declarator'], '1002': ["'^' and_expression 1002"], 'jump_statement': ["CONTINUE ';'", "BREAK ';'", "RETURN ';'", "RETURN expression ';'", ''], 'and_expression': ['additive_expression 1000'], 'inclusive_or_expression': ['and_expression 1002'], 'struct_or_union': ['STRUCT', 'UNION'], 'enumerator_list': ['enumerator 1011'], 'parameter_type_list': ['parameter_list', "parameter_list ',' ELLIPSIS"], 'assignment_operator': ["'='", 'MUL_ASSIGN', 'DIV_ASSIGN', 'MOD_ASSIGN', 'ADD_ASSIGN', 'SUB_ASSIGN', 'LEFT_ASSIGN', 'RIGHT_ASSIGN', 'AND_ASSIGN', 'XOR_ASSIGN', 'OR_ASSIGN'], 'abstract_declarator': ["'(' abstract_declarator ')' 1008", "'[' ']' 1008", "'[' constant_expression ']' 1008", "'(' ')' 1008", "'(' parameter_type_list ')' 1008"], '1005': ['OR_OP logical_and_expression 1005'], 'enum_specifier': ["ENUM '{' enumerator_list '}'", "ENUM IDENTIFIER '{' enumerator_list '}'", 'ENUM IDENTIFIER'], 'assignment_expression': ['and_expression 1002  1007  1005'], 'statement': ["IF '(' expression ')' statement", "IF '(' expression ')' statement ELSE statement"], 'direct_declarator': ["IDENTIFIER '(' parameter_list ')'", "IDENTIFIER '(' ')'", 'IDENTIFIER'], 'labeled_statement': ["IDENTIFIER ':' statement", "CASE constant_expression ':' statement", "DEFAULT ':' statement"], 'parameter_list': ['declaration_specifiers  IDENTIFIER'], 'unary_expression': ['IDENTIFIER', 'CONSTANT', 'STRING_LITERAL', "'(' expression ')'"], 'declaration': ["IDENTIFIER '(' parameter_list ')'", "IDENTIFIER '(' ')'", 'IDENTIFIER'], '1007': ['AND_OP inclusive_or_expression 1007'], 'unary_operator': ["'&'", "'*'", "'+'", "'-'", "'~'", "'!'"], 'constant_expression': ['and_expression 1002  1007  1005']}
c_dict={"1019":["'<' shift_expression 1019", "'>' shift_expression 1019", 'LE_OP shift_expression 1019', 'GE_OP shift_expression 1019', ''],
"additive_expression":['multiplicative_expression 1000'],
"compound_statement":["'{' '}'", "'{' statement_list '}'", "'{' declaration_list '}'", "'{' declaration_list statement_list '}'"],
"storage_class_specifier":['TYPEDEF', 'EXTERN', 'STATIC', 'AUTO', 'REGISTER'],
"1018":['external_declaration 1018', ''],
"1011":["'&' equality_expression 1011", ''],
"1010":['type_qualifier 1010', ''],
"1013":["'[' expression ']' 1013", "'(' ')' 1013", "'(' argument_expression_list ')' 1013", "'.' IDENTIFIER 1013", 'PTR_OP IDENTIFIER 1013', 'INC_OP 1013', 'DEC_OP 1013', ''],
"pointer":["'*'", "'*' type_qualifier_list", "'*' pointer", "'*' type_qualifier_list pointer"],
"1015":["'*' cast_expression 1015", "'/' cast_expression 1015", "'%' cast_expression 1015", ''],
"1014":["',' struct_declarator 1014", ''],
"1017":["'[' constant_expression ']' 1017", "'[' ']' 1017", "'(' parameter_type_list ')' 1017", "'(' identifier_list ')' 1017", "'(' ')' 1017", ''],
"1016":['declaration 1016', ''],
"iteration_statement":["WHILE '(' expression ')' statement", "DO statement WHILE '(' expression ')' ';'", "FOR '(' expression_statement expression_statement ')' statement", "FOR '(' expression_statement expression_statement expression ')' statement"],
"struct_or_union":['STRUCT', 'UNION'],
"direct_abstract_declarator":["'(' abstract_declarator ')' 1002", "'[' ']' 1002", "'[' constant_expression ']' 1002", "'(' ')' 1002", "'(' parameter_type_list ')' 1002"],
"shift_expression":['multiplicative_expression 1000 1003'],
"enum_specifier":["ENUM '{' enumerator_list '}'", "ENUM IDENTIFIER '{' enumerator_list '}'", 'ENUM IDENTIFIER'],
"logical_or_expression":['logical_and_expression 1004'],
"type_name":['type_qualifier', 'type_qualifier specifier_qualifier_list', 'type_specifier', 'type_specifier specifier_qualifier_list', 'type_qualifier abstract_declarator', 'type_qualifier specifier_qualifier_list abstract_declarator', 'type_specifier abstract_declarator', 'type_specifier specifier_qualifier_list abstract_declarator'],
"assignment_operator":["'='", 'MUL_ASSIGN', 'DIV_ASSIGN', 'MOD_ASSIGN', 'ADD_ASSIGN', 'SUB_ASSIGN', 'LEFT_ASSIGN', 'RIGHT_ASSIGN', 'AND_ASSIGN', 'XOR_ASSIGN', 'OR_ASSIGN'],
"equality_expression":['relational_expression 1006'],
"external_declaration":['function_definition'],
"exclusive_or_expression":['and_expression 1008'],
"enumerator":['IDENTIFIER', "IDENTIFIER '=' constant_expression"],
"abstract_declarator":["'*' type_qualifier_list pointer", "'*' pointer", "'*' type_qualifier_list", "'*'", "'(' parameter_type_list ')' 1002", "'(' ')' 1002", "'[' constant_expression ']' 1002", "'[' ']' 1002", "'(' abstract_declarator ')' 1002", "'*' type_qualifier_list pointer direct_abstract_declarator", "'*' pointer direct_abstract_declarator", "'*' type_qualifier_list direct_abstract_declarator", "'*' direct_abstract_declarator"],
"type_qualifier":['CONST', 'VOLATILE'],
"1012":["',' assignment_expression 1012", ''],
"type_specifier":['VOID', 'CHAR', 'SHORT', 'INT', 'LONG', 'FLOAT', 'DOUBLE', 'SIGNED', 'UNSIGNED', 'UNION IDENTIFIER', 'STRUCT IDENTIFIER', "UNION '{' struct_declaration_list '}'", "STRUCT '{' struct_declaration_list '}'", "UNION IDENTIFIER '{' struct_declaration_list '}'", "STRUCT IDENTIFIER '{' struct_declaration_list '}'", 'ENUM IDENTIFIER', "ENUM IDENTIFIER '{' enumerator_list '}'", "ENUM '{' enumerator_list '}'", 'TYPE_NAME'],
"function_definition":['declaration_specifiers declarator compound_statement', 'declarator declaration_list compound_statement', 'declarator compound_statement ;'],
"enumerator_list":["IDENTIFIER '=' constant_expression", 'IDENTIFIER', "IDENTIFIER '=' constant_expression _list ',' enumerator", "IDENTIFIER _list ',' enumerator"],
"cast_expression":["SIZEOF '(' type_name ')'", 'SIZEOF unary_expression', "'&' cast_expression", "'*' cast_expression", "'+' cast_expression", "'-' cast_expression", "'~' cast_expression", "'!' cast_expression", 'DEC_OP unary_expression', 'INC_OP unary_expression', 'postfix_expression', "'(' type_name ')' cast_expression"],
"postfix_expression":['primary_expression 1013'],
"1020":['AND_OP inclusive_or_expression 1020', ''],
"1021":["',' init_declarator 1021", ''],
"1022":["',' IDENTIFIER 1022", ''],
"1023":["' 1023", ''],
"primary_expression":['IDENTIFIER', 'CONSTANT', 'STRING_LITERAL', "'(' expression ')'"],
"multiplicative_expression":["'(' type_name ')' cast_expression 1015", "'(' expression ')' 1013 1015", 'STRING_LITERAL 1013 1015', 'CONSTANT 1013 1015', 'IDENTIFIER 1013 1015', 'INC_OP unary_expression 1015', 'DEC_OP unary_expression 1015', "'!' cast_expression 1015", "'~' cast_expression 1015", "'-' cast_expression 1015", "'+' cast_expression 1015", "'*' cast_expression 1015", "'&' cast_expression 1015", 'SIZEOF unary_expression 1015', "SIZEOF '(' type_name ')' 1015"],
"declaration_specifiers":['REGISTER', 'AUTO', 'STATIC', 'EXTERN', 'TYPEDEF', 'REGISTER declaration_specifiers', 'AUTO declaration_specifiers', 'STATIC declaration_specifiers', 'EXTERN declaration_specifiers', 'TYPEDEF declaration_specifiers', 'TYPE_NAME', "ENUM '{' enumerator_list '}'", "ENUM IDENTIFIER '{' enumerator_list '}'", 'ENUM IDENTIFIER', "STRUCT IDENTIFIER '{' struct_declaration_list '}'", "UNION IDENTIFIER '{' struct_declaration_list '}'", "STRUCT '{' struct_declaration_list '}'", "UNION '{' struct_declaration_list '}'", 'STRUCT IDENTIFIER', 'UNION IDENTIFIER', 'UNSIGNED', 'SIGNED', 'DOUBLE', 'FLOAT', 'LONG', 'INT', 'SHORT', 'CHAR', 'VOID', 'TYPE_NAME declaration_specifiers', "ENUM '{' enumerator_list '}' declaration_specifiers", "ENUM IDENTIFIER '{' enumerator_list '}' declaration_specifiers", 'ENUM IDENTIFIER declaration_specifiers', "STRUCT IDENTIFIER '{' struct_declaration_list '}' declaration_specifiers", "UNION IDENTIFIER '{' struct_declaration_list '}' declaration_specifiers", "STRUCT '{' struct_declaration_list '}' declaration_specifiers", "UNION '{' struct_declaration_list '}' declaration_specifiers", 'STRUCT IDENTIFIER declaration_specifiers', 'UNION IDENTIFIER declaration_specifiers', 'UNSIGNED declaration_specifiers', 'SIGNED declaration_specifiers', 'DOUBLE declaration_specifiers', 'FLOAT declaration_specifiers', 'LONG declaration_specifiers', 'INT declaration_specifiers', 'SHORT declaration_specifiers', 'CHAR declaration_specifiers', 'VOID declaration_specifiers', 'VOLATILE', 'CONST', 'VOLATILE declaration_specifiers', 'CONST declaration_specifiers',''],
"direct_declarator":['IDENTIFIER 1017', "'(' declarator ')' 1017"],
"conditional_expression":['logical_and_expression 1004', "logical_and_expression 1004 '?' expression '"],
"translation_unit":['declarator compound_statement ; 1018', 'declarator declaration_list compound_statement 1018', 'CONST declaration_specifiers declarator compound_statement 1018', 'VOLATILE declaration_specifiers declarator compound_statement 1018', 'CONST declarator compound_statement 1018', 'VOLATILE declarator compound_statement 1018', 'VOID declaration_specifiers declarator compound_statement 1018', 'CHAR declaration_specifiers declarator compound_statement 1018', 'SHORT declaration_specifiers declarator compound_statement 1018', 'INT declaration_specifiers declarator compound_statement 1018', 'LONG declaration_specifiers declarator compound_statement 1018', 'FLOAT declaration_specifiers declarator compound_statement 1018', 'DOUBLE declaration_specifiers declarator compound_statement 1018', 'SIGNED declaration_specifiers declarator compound_statement 1018', 'UNSIGNED declaration_specifiers declarator compound_statement 1018', 'UNION IDENTIFIER declaration_specifiers declarator compound_statement 1018', 'STRUCT IDENTIFIER declaration_specifiers declarator compound_statement 1018', "UNION '{' struct_declaration_list '}' declaration_specifiers declarator compound_statement 1018", "STRUCT '{' struct_declaration_list '}' declaration_specifiers declarator compound_statement 1018", "UNION IDENTIFIER '{' struct_declaration_list '}' declaration_specifiers declarator compound_statement 1018", "STRUCT IDENTIFIER '{' struct_declaration_list '}' declaration_specifiers declarator compound_statement 1018", 'ENUM IDENTIFIER declaration_specifiers declarator compound_statement 1018', "ENUM IDENTIFIER '{' enumerator_list '}' declaration_specifiers declarator compound_statement 1018", "ENUM '{' enumerator_list '}' declaration_specifiers declarator compound_statement 1018", 'TYPE_NAME declaration_specifiers declarator compound_statement 1018', 'VOID declarator compound_statement 1018', 'CHAR declarator compound_statement 1018', 'SHORT declarator compound_statement 1018', 'INT declarator compound_statement 1018', 'LONG declarator compound_statement 1018', 'FLOAT declarator compound_statement 1018', 'DOUBLE declarator compound_statement 1018', 'SIGNED declarator compound_statement 1018', 'UNSIGNED declarator compound_statement 1018', 'UNION IDENTIFIER declarator compound_statement 1018', 'STRUCT IDENTIFIER declarator compound_statement 1018', "UNION '{' struct_declaration_list '}' declarator compound_statement 1018", "STRUCT '{' struct_declaration_list '}' declarator compound_statement 1018", "UNION IDENTIFIER '{' struct_declaration_list '}' declarator compound_statement 1018", "STRUCT IDENTIFIER '{' struct_declaration_list '}' declarator compound_statement 1018", 'ENUM IDENTIFIER declarator compound_statement 1018', "ENUM IDENTIFIER '{' enumerator_list '}' declarator compound_statement 1018", "ENUM '{' enumerator_list '}' declarator compound_statement 1018", 'TYPE_NAME declarator compound_statement 1018', 'TYPEDEF declaration_specifiers declarator compound_statement 1018', 'EXTERN declaration_specifiers declarator compound_statement 1018', 'STATIC declaration_specifiers declarator compound_statement 1018', 'AUTO declaration_specifiers declarator compound_statement 1018', 'REGISTER declaration_specifiers declarator compound_statement 1018', 'TYPEDEF declarator compound_statement 1018', 'EXTERN declarator compound_statement 1018', 'STATIC declarator compound_statement 1018', 'AUTO declarator compound_statement 1018', 'REGISTER declarator compound_statement 1018'],
"constant_expression":["logical_and_expression 1004 '?' expression '", 'logical_and_expression 1004'],
"declarator":["'*' type_qualifier_list pointer direct_declarator", "'*' pointer direct_declarator", "'*' type_qualifier_list direct_declarator", "'*' direct_declarator", "'(' declarator ')' 1017", 'IDENTIFIER 1017'],
"parameter_type_list":['parameter_declaration 1007', "parameter_declaration 1007 ',' ELLIPSIS"],
"relational_expression":["SIZEOF '(' type_name ')' 1015 1000 1003 1019", 'SIZEOF unary_expression 1015 1000 1003 1019', "'&' cast_expression 1015 1000 1003 1019", "'*' cast_expression 1015 1000 1003 1019", "'+' cast_expression 1015 1000 1003 1019", "'-' cast_expression 1015 1000 1003 1019", "'~' cast_expression 1015 1000 1003 1019", "'!' cast_expression 1015 1000 1003 1019", 'DEC_OP unary_expression 1015 1000 1003 1019', 'INC_OP unary_expression 1015 1000 1003 1019', 'IDENTIFIER 1013 1015 1000 1003 1019', 'CONSTANT 1013 1015 1000 1003 1019', 'STRING_LITERAL 1013 1015 1000 1003 1019', "'(' expression ')' 1013 1015 1000 1003 1019", "'(' type_name ')' cast_expression 1015 1000 1003 1019"],
"selection_statement":["IF '(' expression ')' statement", "IF '(' expression ')' statement ELSE statement", "SWITCH '(' expression ')' statement"],
"inclusive_or_expression":["'(' type_name ')' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023", "'(' expression ')' 1013 1015 1000 1003 1019 1006 1011 1008 1023", 'STRING_LITERAL 1013 1015 1000 1003 1019 1006 1011 1008 1023', 'CONSTANT 1013 1015 1000 1003 1019 1006 1011 1008 1023', 'IDENTIFIER 1013 1015 1000 1003 1019 1006 1011 1008 1023', 'INC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023', 'DEC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023', "'!' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023", "'~' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023", "'-' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023", "'+' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023", "'*' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023", "'&' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023", 'SIZEOF unary_expression 1015 1000 1003 1019 1006 1011 1008 1023', "SIZEOF '(' type_name ')' 1015 1000 1003 1019 1006 1011 1008 1023", "' exclusive_or_expression 1023"],
"struct_declaration_list":["TYPE_NAME specifier_qualifier_list struct_declarator_list ';'", "ENUM '{' enumerator_list '}' specifier_qualifier_list struct_declarator_list ';'", "ENUM IDENTIFIER '{' enumerator_list '}' specifier_qualifier_list struct_declarator_list ';'", "ENUM IDENTIFIER specifier_qualifier_list struct_declarator_list ';'", "STRUCT IDENTIFIER '{' struct_declaration_list '}' specifier_qualifier_list struct_declarator_list ';'", "UNION IDENTIFIER '{' struct_declaration_list '}' specifier_qualifier_list struct_declarator_list ';'", "STRUCT '{' struct_declaration_list '}' specifier_qualifier_list struct_declarator_list ';'", "UNION '{' struct_declaration_list '}' specifier_qualifier_list struct_declarator_list ';'", "STRUCT IDENTIFIER specifier_qualifier_list struct_declarator_list ';'", "UNION IDENTIFIER specifier_qualifier_list struct_declarator_list ';'", "UNSIGNED specifier_qualifier_list struct_declarator_list ';'", "SIGNED specifier_qualifier_list struct_declarator_list ';'", "DOUBLE specifier_qualifier_list struct_declarator_list ';'", "FLOAT specifier_qualifier_list struct_declarator_list ';'", "LONG specifier_qualifier_list struct_declarator_list ';'", "INT specifier_qualifier_list struct_declarator_list ';'", "SHORT specifier_qualifier_list struct_declarator_list ';'", "CHAR specifier_qualifier_list struct_declarator_list ';'", "VOID specifier_qualifier_list struct_declarator_list ';'", "TYPE_NAME struct_declarator_list ';'", "ENUM '{' enumerator_list '}' struct_declarator_list ';'", "ENUM IDENTIFIER '{' enumerator_list '}' struct_declarator_list ';'", "ENUM IDENTIFIER struct_declarator_list ';'", "STRUCT IDENTIFIER '{' struct_declaration_list '}' struct_declarator_list ';'", "UNION IDENTIFIER '{' struct_declaration_list '}' struct_declarator_list ';'", "STRUCT '{' struct_declaration_list '}' struct_declarator_list ';'", "UNION '{' struct_declaration_list '}' struct_declarator_list ';'", "STRUCT IDENTIFIER struct_declarator_list ';'", "UNION IDENTIFIER struct_declarator_list ';'", "UNSIGNED struct_declarator_list ';'", "SIGNED struct_declarator_list ';'", "DOUBLE struct_declarator_list ';'", "FLOAT struct_declarator_list ';'", "LONG struct_declarator_list ';'", "INT struct_declarator_list ';'", "SHORT struct_declarator_list ';'", "CHAR struct_declarator_list ';'", "VOID struct_declarator_list ';'", "CONST specifier_qualifier_list struct_declarator_list ';'", "VOLATILE specifier_qualifier_list struct_declarator_list ';'", "CONST struct_declarator_list ';'", "VOLATILE struct_declarator_list ';'", "TYPE_NAME specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "ENUM '{' enumerator_list '}' specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "ENUM IDENTIFIER '{' enumerator_list '}' specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "ENUM IDENTIFIER specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "STRUCT IDENTIFIER '{' struct_declaration_list '}' specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "UNION IDENTIFIER '{' struct_declaration_list '}' specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "STRUCT '{' struct_declaration_list '}' specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "UNION '{' struct_declaration_list '}' specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "STRUCT IDENTIFIER specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "UNION IDENTIFIER specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "UNSIGNED specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "SIGNED specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "DOUBLE specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "FLOAT specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "LONG specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "INT specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "SHORT specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "CHAR specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "VOID specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "TYPE_NAME struct_declarator_list ';' _list struct_declaration", "ENUM '{' enumerator_list '}' struct_declarator_list ';' _list struct_declaration", "ENUM IDENTIFIER '{' enumerator_list '}' struct_declarator_list ';' _list struct_declaration", "ENUM IDENTIFIER struct_declarator_list ';' _list struct_declaration", "STRUCT IDENTIFIER '{' struct_declaration_list '}' struct_declarator_list ';' _list struct_declaration", "UNION IDENTIFIER '{' struct_declaration_list '}' struct_declarator_list ';' _list struct_declaration", "STRUCT '{' struct_declaration_list '}' struct_declarator_list ';' _list struct_declaration", "UNION '{' struct_declaration_list '}' struct_declarator_list ';' _list struct_declaration", "STRUCT IDENTIFIER struct_declarator_list ';' _list struct_declaration", "UNION IDENTIFIER struct_declarator_list ';' _list struct_declaration", "UNSIGNED struct_declarator_list ';' _list struct_declaration", "SIGNED struct_declarator_list ';' _list struct_declaration", "DOUBLE struct_declarator_list ';' _list struct_declaration", "FLOAT struct_declarator_list ';' _list struct_declaration", "LONG struct_declarator_list ';' _list struct_declaration", "INT struct_declarator_list ';' _list struct_declaration", "SHORT struct_declarator_list ';' _list struct_declaration", "CHAR struct_declarator_list ';' _list struct_declaration", "VOID struct_declarator_list ';' _list struct_declaration", "CONST specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "VOLATILE specifier_qualifier_list struct_declarator_list ';' _list struct_declaration", "CONST struct_declarator_list ';' _list struct_declaration", "VOLATILE struct_declarator_list ';' _list struct_declaration"],
"argument_expression_list":["SIZEOF '(' type_name ')' assignment_operator assignment_expression 1024", 'SIZEOF unary_expression assignment_operator assignment_expression 1024', "'&' cast_expression assignment_operator assignment_expression 1024", "'*' cast_expression assignment_operator assignment_expression 1024", "'+' cast_expression assignment_operator assignment_expression 1024", "'-' cast_expression assignment_operator assignment_expression 1024", "'~' cast_expression assignment_operator assignment_expression 1024", "'!' cast_expression assignment_operator assignment_expression 1024", 'DEC_OP unary_expression assignment_operator assignment_expression 1024', 'INC_OP unary_expression assignment_operator assignment_expression 1024', "'(' expression ')' 1013 assignment_operator assignment_expression 1024", 'STRING_LITERAL 1013 assignment_operator assignment_expression 1024', 'CONSTANT 1013 assignment_operator assignment_expression 1024', 'IDENTIFIER 1013 assignment_operator assignment_expression 1024', "' exclusive_or_expression 1023 1020 1004 '?' expression ' 1024", "SIZEOF '(' type_name ')' 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "SIZEOF unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "'&' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "'*' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "'+' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "'-' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "'~' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "'!' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "DEC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "INC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "IDENTIFIER 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "CONSTANT 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "STRING_LITERAL 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "'(' expression ')' 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "'(' type_name ')' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1024", "' exclusive_or_expression 1023 1020 1004 1024", "SIZEOF '(' type_name ')' 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024", 'SIZEOF unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024', "'&' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024", "'*' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024", "'+' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024", "'-' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024", "'~' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024", "'!' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024", 'DEC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024', 'INC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024', 'IDENTIFIER 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024', 'CONSTANT 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024', 'STRING_LITERAL 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024', "'(' expression ')' 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024", "'(' type_name ')' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1024"],
"type_qualifier_list":['type_qualifier 1010'],
"specifier_qualifier_list":['type_specifier specifier_qualifier_list', 'type_specifier', 'type_qualifier specifier_qualifier_list', 'type_qualifier'],
"logical_and_expression":['inclusive_or_expression 1020'],
"declaration":[],
"struct_or_union_specifier":["struct_or_union IDENTIFIER '{' struct_declaration_list '}'", "struct_or_union '{' struct_declaration_list '}'", 'struct_or_union IDENTIFIER'],
"unary_operator":["'&'", "'*'", "'+'", "'-'", "'~'", "'!'"],
"struct_declaration":["VOLATILE struct_declarator_list ';'", "CONST struct_declarator_list ';'", "VOLATILE specifier_qualifier_list struct_declarator_list ';'", "CONST specifier_qualifier_list struct_declarator_list ';'", "type_specifier struct_declarator_list ';'", "type_specifier specifier_qualifier_list struct_declarator_list ';'"],
"identifier_list":['IDENTIFIER 1022'],
"assignment_expression":['conditional_expression', 'unary_expression assignment_operator assignment_expression'],
"statement_list":['statement 1005'],
"initializer":['unary_expression assignment_operator assignment_expression', 'conditional_expression', "'{' initializer_list '}'", "'{' initializer_list ',' '}'"],
"initializer_list":['initializer 1009'],
"unary_expression":['postfix_expression', 'INC_OP unary_expression', 'DEC_OP unary_expression', "'!' cast_expression", "'~' cast_expression", "'-' cast_expression", "'+' cast_expression", "'*' cast_expression", "'&' cast_expression", 'SIZEOF unary_expression', "SIZEOF '(' type_name ')'"],
"jump_statement":["GOTO IDENTIFIER ';'", "CONTINUE ';'", "BREAK ';'", "RETURN ';'", "RETURN expression ';'"],
"and_expression":['relational_expression 1006 1011'],
"expression":["SIZEOF '(' type_name ')' assignment_operator assignment_expression 1012", 'SIZEOF unary_expression assignment_operator assignment_expression 1012', "'&' cast_expression assignment_operator assignment_expression 1012", "'*' cast_expression assignment_operator assignment_expression 1012", "'+' cast_expression assignment_operator assignment_expression 1012", "'-' cast_expression assignment_operator assignment_expression 1012", "'~' cast_expression assignment_operator assignment_expression 1012", "'!' cast_expression assignment_operator assignment_expression 1012", 'DEC_OP unary_expression assignment_operator assignment_expression 1012', 'INC_OP unary_expression assignment_operator assignment_expression 1012', 'postfix_expression assignment_operator assignment_expression 1012', 'conditional_expression 1012'],
"1006":['EQ_OP relational_expression 1006', 'NE_OP relational_expression 1006', ''],
"1007":["',' parameter_declaration 1007", ''],
"1004":['OR_OP logical_and_expression 1004', ''],
"1005":['statement 1005', ''],
"1002":["'[' ']' 1002", "'[' constant_expression ']' 1002", "'(' ')' 1002", "'(' parameter_type_list ')' 1002", ''],
"1003":['LEFT_OP additive_expression 1003', 'RIGHT_OP additive_expression 1003', ''],
"1000":["'+' multiplicative_expression 1000", "'-' multiplicative_expression 1000", ''],
"1001":["_specifiers ';' 1001", "_specifiers init_declarator_list ';' 1001", ''],
"declaration_list":[],
"expression_statement":["';'", "expression ';'"],
"1008":["'^' and_expression 1008", ''],
"1009":["',' initializer 1009", ''],
"struct_declarator_list":['struct_declarator 1014'],
"labeled_statement":["IDENTIFIER '"],
"parameter_list":['parameter_declaration 1007'],
"init_declarator_list":['init_declarator 1021'],
"parameter_declaration":['CONST declaration_specifiers abstract_declarator', 'VOLATILE declaration_specifiers abstract_declarator', 'CONST abstract_declarator', 'VOLATILE abstract_declarator', 'VOID declaration_specifiers abstract_declarator', 'CHAR declaration_specifiers abstract_declarator', 'SHORT declaration_specifiers abstract_declarator', 'INT declaration_specifiers abstract_declarator', 'LONG declaration_specifiers abstract_declarator', 'FLOAT declaration_specifiers abstract_declarator', 'DOUBLE declaration_specifiers abstract_declarator', 'SIGNED declaration_specifiers abstract_declarator', 'UNSIGNED declaration_specifiers abstract_declarator', 'UNION IDENTIFIER declaration_specifiers abstract_declarator', 'STRUCT IDENTIFIER declaration_specifiers abstract_declarator', "UNION '{' struct_declaration_list '}' declaration_specifiers abstract_declarator", "STRUCT '{' struct_declaration_list '}' declaration_specifiers abstract_declarator", "UNION IDENTIFIER '{' struct_declaration_list '}' declaration_specifiers abstract_declarator", "STRUCT IDENTIFIER '{' struct_declaration_list '}' declaration_specifiers abstract_declarator", 'ENUM IDENTIFIER declaration_specifiers abstract_declarator', "ENUM IDENTIFIER '{' enumerator_list '}' declaration_specifiers abstract_declarator", "ENUM '{' enumerator_list '}' declaration_specifiers abstract_declarator", 'TYPE_NAME declaration_specifiers abstract_declarator', 'VOID abstract_declarator', 'CHAR abstract_declarator', 'SHORT abstract_declarator', 'INT abstract_declarator', 'LONG abstract_declarator', 'FLOAT abstract_declarator', 'DOUBLE abstract_declarator', 'SIGNED abstract_declarator', 'UNSIGNED abstract_declarator', 'UNION IDENTIFIER abstract_declarator', 'STRUCT IDENTIFIER abstract_declarator', "UNION '{' struct_declaration_list '}' abstract_declarator", "STRUCT '{' struct_declaration_list '}' abstract_declarator", "UNION IDENTIFIER '{' struct_declaration_list '}' abstract_declarator", "STRUCT IDENTIFIER '{' struct_declaration_list '}' abstract_declarator", 'ENUM IDENTIFIER abstract_declarator', "ENUM IDENTIFIER '{' enumerator_list '}' abstract_declarator", "ENUM '{' enumerator_list '}' abstract_declarator", 'TYPE_NAME abstract_declarator', 'TYPEDEF declaration_specifiers abstract_declarator', 'EXTERN declaration_specifiers abstract_declarator', 'STATIC declaration_specifiers abstract_declarator', 'AUTO declaration_specifiers abstract_declarator', 'REGISTER declaration_specifiers abstract_declarator', 'TYPEDEF abstract_declarator', 'EXTERN abstract_declarator', 'STATIC abstract_declarator', 'AUTO abstract_declarator', 'REGISTER abstract_declarator'],
"struct_declarator":['IDENTIFIER 1017', "'(' declarator ')' 1017", "'*' direct_declarator", "'*' type_qualifier_list direct_declarator", "'*' pointer direct_declarator", "'*' type_qualifier_list pointer direct_declarator", "'"],
"1024":["',' assignment_expression 1024", ''],
"init_declarator":['IDENTIFIER 1017', "'(' declarator ')' 1017", "'*' direct_declarator", "'*' type_qualifier_list direct_declarator", "'*' pointer direct_declarator", "'*' type_qualifier_list pointer direct_declarator", "IDENTIFIER 1017 '=' initializer", "'(' declarator ')' 1017 '=' initializer", "'*' direct_declarator '=' initializer", "'*' type_qualifier_list direct_declarator '=' initializer", "'*' pointer direct_declarator '=' initializer", "'*' type_qualifier_list pointer direct_declarator '=' initializer"],
"statement":["IDENTIFIER '", "'{' declaration_list statement_list '}'", "'{' declaration_list '}'", "'{' statement_list '}'", "'{' '}'", "' exclusive_or_expression 1023 1020 1004 '?' expression ' 1012 ';'", "SIZEOF '(' type_name ')' 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "SIZEOF unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "'&' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "'*' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "'+' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "'-' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "'~' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "'!' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "DEC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "INC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "IDENTIFIER 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "CONSTANT 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "STRING_LITERAL 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "'(' expression ')' 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "'(' type_name ')' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 '?' expression ' 1012 ';'", "' exclusive_or_expression 1023 1020 1004 1012 ';'", "SIZEOF '(' type_name ')' 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "SIZEOF unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "'&' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "'*' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "'+' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "'-' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "'~' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "'!' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "DEC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "INC_OP unary_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "IDENTIFIER 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "CONSTANT 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "STRING_LITERAL 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "'(' expression ')' 1013 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "'(' type_name ')' cast_expression 1015 1000 1003 1019 1006 1011 1008 1023 1020 1004 1012 ';'", "'(' expression ')' 1013 assignment_operator assignment_expression 1012 ';'", "STRING_LITERAL 1013 assignment_operator assignment_expression 1012 ';'", "CONSTANT 1013 assignment_operator assignment_expression 1012 ';'", "IDENTIFIER 1013 assignment_operator assignment_expression 1012 ';'", "INC_OP unary_expression assignment_operator assignment_expression 1012 ';'", "DEC_OP unary_expression assignment_operator assignment_expression 1012 ';'", "'!' cast_expression assignment_operator assignment_expression 1012 ';'", "'~' cast_expression assignment_operator assignment_expression 1012 ';'", "'-' cast_expression assignment_operator assignment_expression 1012 ';'", "'+' cast_expression assignment_operator assignment_expression 1012 ';'", "'*' cast_expression assignment_operator assignment_expression 1012 ';'", "'&' cast_expression assignment_operator assignment_expression 1012 ';'", "SIZEOF unary_expression assignment_operator assignment_expression 1012 ';'", "SIZEOF '(' type_name ')' assignment_operator assignment_expression 1012 ';'", "';'", "SWITCH '(' expression ')' statement", "IF '(' expression ')' statement ELSE statement", "IF '(' expression ')' statement", "FOR '(' expression_statement expression_statement expression ')' statement", "FOR '(' expression_statement expression_statement ')' statement", "DO statement WHILE '(' expression ')' ';'", "WHILE '(' expression ')' statement", "RETURN expression ';'", "RETURN ';'", "BREAK ';'", "CONTINUE ';'", "GOTO IDENTIFIER ';'"],
}
CONTROLLER=8080
terminals={}




def get_terminals():
    global terminals
    if len(terminals)!=0:
        return terminals
    terminals={"IDENTIFIER","CONSTANT","STRING_LITERAL","SIZEOF","PTR_OP","INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","TYPE_NAME","TYPEDEF","EXTERN","STATIC","AUTO","REGISTER","CHAR","SHORT","INT","LONG","SIGNED","UNSIGNED","FLOAT","DOUBLE","CONST","VOLATILE","VOID","STRUCT","UNION","ENUM","ELLIPSIS","CASE","DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE","BREAK","RETURN"}
    for item_key in c_dict.keys():
        for items in c_dict[item_key]:
            for item in re.split(r'\s+',items):
                if (item.lower() in [c_upper.lower() for c_upper in c_dict.keys()])or (item.isspace() or item.upper() in c_dict.keys()):
                    continue
                terminals.add(item)

    terminals.add("")
    return terminals

def main():
    for item in get_terminals():
        print(item)
if __name__=="__main__":
    main()
